#알파벳과 숫자를 섞어서 입력을 받아서 숫자와 문자를 분리하여 출력하는 프로그램
"""
str = input('숫자를 포함한 문자열을 입력하세요 : ')
al =  ''
nu = ''

for i in str:
    if i.isalpha():
        al = al + i
    elif i.isdigit():
        nu = nu + i


print('문자 : ',al)
print('숫자 : ',nu)

print(f'문자({len(al)}) : {al}')
print(f'문자({len(nu)}) : {nu}')
"""
"""
str=input('숫자를 포함한 문자열을 입력하세요>>> ')


ai=''
no=''
for i in str :
    if 64<ord(i)<123:
        ai=ai+i
    
    elif 48<ord(i)<58:
        no=no+i
    
    
print(f'문자({len(ai)}) : ',ai)
print(f'숫자({len(no)}): ',no)
"""


"""
#알고리즘
알고리즘은 문제나 과젤르 해결하기 위한 처리 절차를 구체적인 순서로 표현한 아이디어나 생각.
알고리즘,표현방법은 수도코드(pseudo code),순서도(flow chart) 가 있다.

#프로그램 작성 순서
기획 - 설계(알고리즘) - 프로그래밍 - 디버그 

#좋은 알고리즘
알기쉽고, 속도가 빠르고,효율적이고(메모리를 적게사용),재이용(재사용)이 쉽다.

#왜 알고리즘 ??
좋은 프로그램 만들수있고,좋은 프로그램인지 판단할수있고
프로그램 작성을 효율적으로 할수있고 프로그래밍 기술을 향상시키는데 큰 도움이 된다.

#알고리즘의 조건
결과를 얻을수 있어야 하고 반드시 종료되어야한다.

#알고리즘 세가지 기본형
1.순차구조 : 처음부터 순서대로 처리
2.선택구조 : 조건식 if
3.반복구조 : 반복문 for while

# 순서도 flow 차트, 흐름도
프로그래밍 언어를 사용하지 않고 알고리즘을 기술하는 방법
처리와 절차를 시각적으로 표현한다.
자신이 생각하고 있는 알고리즘이 올바른지, 처리와 절차에 문제가 없는지를 눈으로 확인할수도있고
다른 사람에게도 쉽게 전달할 수 있는 특징이 있다.

#주의사항
처리기호나 판단 기호가 많아지면 흐름이 복잡하게 꼬인다.
입력은 반드시 위에서 들어가도록한다.
판단기호로부터 나오는 흐름선에는 Yes,No를 확실하게 기입힌다.
입력선이나 출력선이 없는 처리기호는 만들지 않는다.

#유명한 알고리즘이란??
유명한 알고리즘을 배우는 것은 프로그래밍 기술향상에 커다란 도움이된다.

#탐색 : Linear Search,Binary Search, Hash Search
#정렬 : Selection Sort,Bubble Sort, Insertion Sort, Quick Sort
# Sieve of Eratosthenes, Euclid Alsgorithm

#가우스 소거법,사다리꼴 법칙,디익스트라 알고리즘, 이분법,뉴턴법...
#KMP 알고리즘, BM알고리즘......

#선형탐색법 Linear Search
맨앞부터 순서대로 찾는 값이 나올때까지 순차적으로 조사하는 알고리즘.
알고리즘은 단순하여 이해는 쉽지만 탐색 효율자체는 그다지 좋은편은 아니다.

탐색시작 4 2 3 5     <-내가찾는 수 5
        -           X
          -         X
            -       X
              -     O   <-처음부터 순차적으로 하나씩 확인한다.




"""