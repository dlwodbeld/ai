#Review
	comment 주석- 코드에 대한설명, 컴퓨터는 읽지않고 사람만 읽는 내용.
		코드 일정부분을 잠시동안 비활성화 하는데 쓰이기도한다.
		본인이 기록한 내용을 다른팀원이 작성한 내용을 파악하기 쉬워진다.
	여러줄 주석 방법('ctrl + \')
	doc string(주석의 용도로도 쓰이는...)
		'''
		작성일 : 2022/01/26		
		담당자 : 홍길동
		비고 : austiny@gatech.edu
		'''
-------------------------------or------------------------------
		"""
		작성일 : 2022/01/26		
		담당자 : 홍길동
		비고 : austiny@gatech.edu
		"""
		주석은 코드의 우측,상단에 주로 쓴다.
#변수 Variable
	어떤 값을 저장하는 저장소
		a = 100
		print(a)
	
	Stu_Math_Sum = 430 #스네이크 케이스 snake_case(단어 사이에[_]를 추가)
	StuMathSum #캐멀 케이스 CamelCase(단어의 첫글자를 대문자로)
		*절대 숫자가 먼저 올수는 없다.
		*_를 제외한 특수문자는 사용할수없다.
		*한글로 변수명을 설정 가능하지만 되도록이면 사용하지말자.
		

# 인덱싱 (슬라이딩)

s = 'world'
print(s[2]) #파이선은 인덱스 시작이 0이다.
print(s[-1]) #-1은 마지막 인덱스를 가리킨다.
print([s4])
하나만 추출할떄는 indexing
여러개를 추출할때는 

#print()
print('좋은 아침입니다.')
print('좋은 %s입니다.'%when)
print('좋은 'when'입니다.')
print('좋은 {}입니다.'.format(when))
print(f'좋은 {when}입니다.')


#리스트 List 튜플 Tuple 딕셔너리 DIct 셋 Set
여러개의 값을 한번에 저장하는 자료형이 필요하다.
지금까지 사용한 숫자1, 문자1등 개별적,독립적인 자료가 아닌 이러한 여러자료를 하나에 모아서 사용할수있게해준다.
리스트에 넣는 자료를 요소 element 라고한다.


# 리스트 List
리스트 구성 -> []
다양한 자료형의 데이터를 한번에 담을수있다.하지만 다른자료형을 섞어서 쓰는건 좋은방식은 아니다.
하나의 리스트엔 하나의 자료형만 저장하는것이 바람직하다.
리스트는 인덱싱 indexing과 슬라이싱slicing이 가능하다.
리스트는 수정/삭제 가 가능하다.(mutable)
#indexerror 아주 많이 접하게 될 에러(예외)
#리스트는 연산이 가능하다.

#리스트에 많이 사용되는 함수들
append (****) 리스트에 요소를 추가할 떄 사용,끝에만 추가
insert() 리스트에 요소를 추가할떄 사용,트정 위치를 지정하여 추가가능
#리스트 연결만으로는 list에 어떠한 영향도 주지 않는다.(비파괴적 처리)
#하지만 extend()를 사용하면 list에 직접적으로 영향을 주게된다.(파괴적 처리)
-->원래 자료를 사용할때는 비파괴적으로 사용하는것이 바람직하다.
	가능하면 원본 데이터는 그대로 유지하고 사용하는것이 선택지가 넓다.
del() 리스트에서 데이터 삭제
.pop() 리스트에서 마지막 위치 데이터 삭제(정학히는 뽑아낸다는 표현이 맞다)
.remove 값으로 삭제 (리스트에서 중복된여러개의 값을 제거하려면 반복문을 사용)
.clear() 리스트요소를 전부 삭제
파괴적 동작(뭔가를 파괴하고 동작한다)
비파괴적 동작(파괴를 안하고 동작한다)
in / not in 리스트에 존재하는 요소인지를 확인
리스트는 수정/삭제가 가능(mutable)/튜플은 수정/삭제 불가능( immutable)

# Dict {}딕셔너리 (java 의 map, JS의 json 과 유사한 자료구조)->{}사용
# 리스트가 인덱스를 기반으로 값을 저장한다면 딕셔너리는 키 값을 기반으로 값을 저장한다.
삽입/삭제 가 가능하다. muable
순서가 없으므로 인덱싱과 슬라이싱이 불가능하다.
 #Dict에서 자주 등장하는 에러(에외처리)
KeyError 리스트에서 없는 인덱스에 접근하려고하면 indexError가 발생하는것처럼
Dict 에서도 존재하지 않는 키값을 사용하면 예외 또는 에러를 발생시킨다.

#튜플 tuple
()를 사용하여 작성한다.
리스트와 거의 대부분 유사하나, 튜플은 삽입,수정등이 불가능하다. immutable
튜플은 1개의 원소로 작성할떄는 ,를 삽입한다. ex) -> (1,) = [1]
퓨틀은 괄호를 생략할수있다.
(1,)인 이유는 (,)가 없으면 정수로 인식하여 tuple이 아닌 int로 인식하게된다.
# Set 집합
{} 를 사용하여 작성한다.
중복을 허용하지 않는다.
순서가 없다. unordered( 리스트나 튜플은 순서가 있기때문에 ordered
			인덱싱과 슬라이싱을 통해 값을 꺼낼수 있지만
			딕셔너리와 셋은 순서가 없어 불가능하다.
중복을 허용하지 않는다는건 중복제거 필터용으로 많이 사용된다.
Set 자료형에 저장된 값을 꺼내려면 리스트나 튜플로 변환하여 사용한다.
mutable 수정/삭제 가능하다.
# 집합 계산
합집합(|,union()),차집합(-,difference()),교집합(&,intersection())
집합은 인덱스 개념이 존재하지않는다. 따라거 값을 지정하여 직접 삭제한다.

#if
특정 조건을 만족하는지 여부에 따라 실행되는코드가 달라져야할 때 사용된다.

if 조건식:
	만족할 때 실행코드
elif 조건식:
	if조건식을 만족 안할때 실행코드
else:
 	위에 모든게 만족하지 못할 때 실행 코드
